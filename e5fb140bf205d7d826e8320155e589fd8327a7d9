{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4ba75ef1_cae33932",
        "filename": "meson.build",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2023-08-23T09:36:05Z",
      "side": 1,
      "message": "`auto` should enter the subdir too here and above.",
      "revId": "e5fb140bf205d7d826e8320155e589fd8327a7d9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c161fc7f_44fa7f41",
        "filename": "meson.build",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-23T16:56:14Z",
      "side": 1,
      "message": "Done. Using Meson\u0027s implicit feature-to-bool conversion.",
      "parentUuid": "4ba75ef1_cae33932",
      "revId": "e5fb140bf205d7d826e8320155e589fd8327a7d9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b049b20c_10d94d91",
        "filename": "meson.options",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2023-08-23T09:36:05Z",
      "side": 1,
      "message": "These should be `auto` by default. We shouldn\u0027t be overriding the typically expected behavior for features which allows downgrading in environments that don\u0027t fully support or want to build all of them. Explicit `enabled` / `disabled` can be passed to the build.",
      "revId": "e5fb140bf205d7d826e8320155e589fd8327a7d9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3619119_38a86cdc",
        "filename": "meson.options",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-23T16:56:14Z",
      "side": 1,
      "message": "Done. Now they are auto. I\u0027m guessing auto means \"enabled but weak\". What happens if no defaults are provided and the value is auto?",
      "parentUuid": "b049b20c_10d94d91",
      "revId": "e5fb140bf205d7d826e8320155e589fd8327a7d9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a5fd144_e88e33eb",
        "filename": "test/meson.build",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2023-08-23T09:36:05Z",
      "side": 1,
      "message": "It already does what you think.",
      "revId": "e5fb140bf205d7d826e8320155e589fd8327a7d9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7bed1092_693f634f",
        "filename": "test/meson.build",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-23T16:56:14Z",
      "side": 1,
      "message": "Done, same as other file. Meson never does what I think it does....",
      "parentUuid": "8a5fd144_e88e33eb",
      "revId": "e5fb140bf205d7d826e8320155e589fd8327a7d9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "940c6053_3deb0dc0",
        "filename": "test/meson.build",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2023-08-30T06:04:04Z",
      "side": 1,
      "message": "Don\u0027t we also need to check whether the dependency was actually found, in case it was set to \"auto\" but but meson couldn\u0027t find gtest or gmock?",
      "parentUuid": "7bed1092_693f634f",
      "revId": "e5fb140bf205d7d826e8320155e589fd8327a7d9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa71d4fd_7faa7ccb",
        "filename": "test/meson.build",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000520
      },
      "writtenOn": "2023-08-30T22:16:09Z",
      "side": 1,
      "message": "If `required` is `false`, and the dependency is not found, will Meson still attempt to build the needer of the dependency, and thus error out? If so, that would somewhat defeat the point of being optional. Should the parts of the Meson file that use `gtest` and `gmock` be surrounded in appropriate `if` blocks, so that they will be excluded if not found?",
      "parentUuid": "940c6053_3deb0dc0",
      "revId": "e5fb140bf205d7d826e8320155e589fd8327a7d9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8c028fc_0670846f",
        "filename": "test/meson.build",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1000233
      },
      "writtenOn": "2023-08-31T05:17:30Z",
      "side": 1,
      "message": "That\u0027s my understanding, and it matches the examples in the documentation: https://mesonbuild.com/Build-options.html#features",
      "parentUuid": "aa71d4fd_7faa7ccb",
      "revId": "e5fb140bf205d7d826e8320155e589fd8327a7d9",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}